Вот подробные комментарии к каждой строке в этом коде:

```csharp
public partial class Airline
{
    // Свойство для пункта назначения рейса.
    // Оно проверяет, что введенное значение не является пустой строкой или пробелом.
    public string Destination
    {
        // Возвращает текущее значение поля destination.
        get => destination;
        
        // Устанавливает значение поля destination. Проверяет, что значение не является пустым или содержащим только пробелы.
        set
        {
            if (!string.IsNullOrWhiteSpace(value))
                destination = value;  // Если проверка пройдена, назначаем новое значение.
            else
                throw new ArgumentException("Пункт назначения не может быть пустым.");  // В противном случае генерируется исключение.
        }
    }

    // Свойство для номера рейса.
    // Оно проверяет, что номер рейса является положительным числом.
    public int FlightNumber
    {
        // Возвращает текущее значение поля flightNumber.
        get => flightNumber;

        // Устанавливает значение поля flightNumber. Проверяет, что номер рейса больше нуля.
        set
        {
            if (value > 0)
                flightNumber = value;  // Если номер рейса положительный, сохраняем его.
            else
                throw new ArgumentException("Номер рейса должен быть положительным.");  // Если нет, выбрасываем исключение.
        }
    }

    // Свойство для типа самолета.
    // Проверяет, что тип самолета не является пустой строкой или строкой, содержащей только пробелы.
    public string AirplaneType
    {
        // Возвращает текущее значение поля airplaneType.
        get => airplaneType;

        // Устанавливает значение поля airplaneType, проверяя, что оно не является пустым.
        set
        {
            if (!string.IsNullOrWhiteSpace(value))
                airplaneType = value;  // Если строка не пустая, устанавливаем новое значение.
            else
                throw new ArgumentException("Тип самолета не может быть пустым.");  // Иначе выбрасывается исключение.
        }
    }

    // Свойство для времени вылета рейса (TimeSpan).
    public TimeSpan DepartureTime
    {
        // Возвращает текущее значение поля departureTime.
        get => departureTime;

        // Устанавливает новое значение поля departureTime.
        set => departureTime = value;
    }

    // Свойство для дней недели, когда выполняется рейс.
    // Проверяет, что массив дней недели содержит хотя бы один элемент.
    public string[] DaysOfWeek
    {
        // Возвращает текущее значение поля daysOfWeek.
        get => daysOfWeek;

        // Устанавливает значение поля daysOfWeek, проверяя, что оно содержит хотя бы один день.
        set
        {
            if (value.Length > 0)
                daysOfWeek = value;  // Если массив не пустой, сохраняем новое значение.
            else
                throw new ArgumentException("Должен быть указан хотя бы один день недели.");  // Если массив пустой, выбрасывается исключение.
        }
    }

    // Метод для обновления информации о рейсе с использованием параметров ref и out.
    // ref - параметр позволяет изменять значение переданной переменной.
    // out - параметр возвращает новое значение, сгенерированное в методе.
    public void UpdateFlightInfo(ref string newDestination, out int newFlightNumber)
    {
        // Генерируется случайный номер рейса.
        newFlightNumber = new Random().Next(1, 1000);  
        
        // Обновляем пункт назначения через параметр ref.
        Destination = newDestination;  
    }

    // Статический метод для вывода информации о количестве созданных объектов класса Airline.
    public static void PrintClassInfo()
    {
        // Выводит количество созданных объектов.
        Console.WriteLine($"Общее количество созданных объектов авиакомпании: {objectCount}");
    }

    // Переопределение метода Equals из класса Object для сравнения объектов Airline.
    // Метод проверяет, являются ли два объекта Airline равными.
    public override bool Equals(object? obj)
    {
        // Проверяем, что переданный объект является объектом класса Airline.
        if (obj is Airline other)
        {
            // Сравниваем объекты по номеру рейса и пункту назначения.
            return flightNumber == other.flightNumber && destination == other.destination;
        }
        return false;  // Если объект не является Airline, возвращаем false.
    }

    // Переопределение метода GetHashCode из класса Object для уникальной идентификации объектов Airline.
    // Метод возвращает хэш-код, который используется для оптимизации поиска объектов.
    public override int GetHashCode()
    {
        // Хэш-код формируется на основе хэш-кодов номера рейса и пункта назначения.
        return flightNumber.GetHashCode() ^ destination.GetHashCode();
    }

    // Переопределение метода ToString из класса Object для пользовательского представления объекта Airline в

```csharp
    // строковом формате.
    // Этот метод возвращает строку, которая описывает рейс, включая номер, пункт назначения, тип самолета и время вылета.
    public override string ToString()
    {
        // Формируем строку с информацией о рейсе.
        return $"Рейс {FlightNumber}, Пункт назначения: {Destination}, Тип самолета: {AirplaneType}, Время вылета: {DepartureTime}";
    }

    // Статический метод для поиска рейсов по пункту назначения.
    // Принимает массив объектов Airline и строку с пунктом назначения для поиска.
    public static void FindFlightsByDestination(Airline[] airlines, string destination)
    {
        // Используем LINQ для поиска рейсов, пункт назначения которых совпадает с указанным.
        // StringComparison.OrdinalIgnoreCase используется для сравнения строк без учета регистра.
        var flights = airlines.Where(f => f.Destination.Equals(destination, StringComparison.OrdinalIgnoreCase)).ToArray();

        // Если рейсы не найдены, выводим сообщение об отсутствии результатов.
        if (flights.Length == 0)
        {
            Console.WriteLine($"Рейсы в пункт назначения {destination} не найдены.");
        }
        else
        {
            // Если рейсы найдены, выводим их список.
            Console.WriteLine($"Рейсы в пункт назначения {destination}:");
            foreach (var flight in flights)
            {
                // Для каждого найденного рейса выводим информацию, используя метод ToString().
                Console.WriteLine(flight);
            }
        }
    }

    // Статический метод для поиска рейсов по дню недели.
    // Принимает массив объектов Airline и строку с днем недели для поиска.
    public static void FindFlightsByDayOfWeek(Airline[] airlines, string dayOfWeek)
    {
        // Используем LINQ для поиска рейсов, выполняемых в указанный день недели.
        // Any проверяет, есть ли среди дней недели рейса день, который совпадает с указанным (без учета регистра).
        var flights = airlines.Where(f => f.DaysOfWeek.Any(day => day.Equals(dayOfWeek, StringComparison.OrdinalIgnoreCase))).ToArray();

        // Если рейсы не найдены на указанный день, выводим сообщение.
        if (flights.Length == 0)
        {
            Console.WriteLine($"Рейсы на {dayOfWeek} не найдены.");
        }
        else
        {
            // Если рейсы найдены, выводим их список.
            Console.WriteLine($"Рейсы на {dayOfWeek}:");
            foreach (var flight in flights)
            {
                // Для каждого найденного рейса выводим информацию.
                Console.WriteLine(flight);
            }
        }
    }
}
```

### Пояснение:

1. **Свойства (`Destination`, `FlightNumber`, `AirplaneType`, `DepartureTime`, `DaysOfWeek`)**:
   - Используются для управления доступом к полям класса. Они проверяют корректность входных данных перед установкой значений (например, что номер рейса положительный, а массив дней недели не пустой).

2. **Метод `UpdateFlightInfo`**:
   - Использует параметры `ref` и `out`. `ref` передает параметр по ссылке, позволяя менять исходную переменную. `out` используется для возвращения нового сгенерированного номера рейса.

3. **Метод `PrintClassInfo`**:
   - Статический метод, который выводит общее количество созданных объектов класса `Airline`.

4. **Переопределенные методы `Equals`, `GetHashCode`, `ToString`**:
   - Эти методы изменены для сравнения объектов, генерации уникальных хэш-кодов и представления объектов в удобочитаемом строковом формате.

5. **Методы `FindFlightsByDestination` и `FindFlightsByDayOfWeek`**:
   - Статические методы для поиска рейсов по пункту назначения или по дню недели. Они используют LINQ для фильтрации рейсов в массиве, сравнивая параметры с указанными значениями.